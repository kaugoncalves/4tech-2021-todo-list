{"version":3,"sources":["components/TaskForm/IsItUrgent/IsItUrgent.js","components/TaskForm/WhatToDo/WhatToDo.js","helpers/whoList.js","assets/avatar1.png","assets/avatar2.png","assets/avatar3.png","assets/avatar4.png","components/TaskForm/Who/Who.js","components/TaskForm/Save/Save.js","components/TaskForm/TaskForm.js","components/TaskList/TaskCard/TaskCard.js","components/TaskList/TaskList.js","pages/Layout/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["IsItUrgent","initialUrgency","onChangePriority","initialUrgencyScale","urgency","color","selected","map","x","useState","urgencyScale","setUrgencyScale","FormItem","styled","div","IsItUrgentLabel","IsItUrgentSelectionArea","i","style","backgroundColor","width","height","border","borderRadius","cursor","onClick","urgencyScaleWithNewSelection","find","onClickToSetUrgency","WhatToDo","initialWhatToDo","onChangeWhatToDo","WhatToDoLabel","InputWhatToDo","input","defaultValue","onChange","e","target","value","type","whoList","idx","avatarSource","Who","initialSelectedWho","onChangeSelectedWho","selectedwho","setSelectedWho","WhoLabel","WhoSelectionArea","ScrollLeftOrRightArrow","ThreeAvatarsArea","getAvatarStyle","avatarIndex","boxSizing","margin","LeftOutlined","icon","src","alt","RightOutlined","Save","loading","saveTask","SaveLabel","SaveButton","spinning","CheckOutlined","TaskForm","submitNewTask","formValues","taskId","uniqid","status","whatToDo","selectedWho","priority","createdAt","TaskFormLayout","Date","getTime","console","log","TaskCard","changeTaskStatus","who","Footer","size","title","ColorBlock","span","CardTitle","getPriorityToSetIntoTitle","extra","ToDo","Doing","Done","getCardButtons","marginBottom","toLocaleDateString","TaskList","taskList","setTaskList","TaskListLayout","ColumnHeadersArea","ColumnHeader","Divider","moveTo","taskListCopy","Column","Row","filter","generateTaskColumns","Layout","setLoading","Structure","newTask","push","reorderedTaskListCopy","sort","y","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c425167.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport const IsItUrgent = ({ initialUrgency, onChangePriority }) => {\r\n\r\n    const defaultlUrgencyScale = [{\r\n        urgency: 'low',\r\n        color: '#71A1FF',\r\n        selected: false,\r\n    },\r\n    {\r\n        urgency: 'average',\r\n        color: '#F8BD26',\r\n        selected: false,\r\n    },\r\n    {\r\n        urgency: 'high',\r\n        color: '#FF7171',\r\n        selected: false,\r\n    }]\r\n\r\n    const initialUrgencyScale = defaultlUrgencyScale.map(x => {\r\n        if (x.urgency === initialUrgency.urgency) {\r\n            return { ...x, selected: true }\r\n        }\r\n\r\n        return x\r\n    })\r\n\r\n    const [urgencyScale, setUrgencyScale] = useState(initialUrgencyScale)\r\n\r\n\r\n    const FormItem = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 25%;\r\n    padding-left: 1rem`\r\n\r\n    const IsItUrgentLabel = styled.div`\r\n    font-size: 30px;\r\n    `\r\n\r\n    const IsItUrgentSelectionArea = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    height: 5rem;\r\n    background: #FFFFFF;\r\n    box-shadow: 5px 5px 10px #A9C4DA;\r\n    border-radius: 5px;`\r\n\r\n    const onClickToSetUrgency = (urgency) => {\r\n        const urgencyScaleWithNewSelection = urgencyScale.map(x => {\r\n\r\n            if (x.urgency === urgency) {\r\n                return { ...x, selected: true }\r\n            }\r\n\r\n            return { ...x, selected: false }\r\n        })\r\n\r\n        setUrgencyScale(urgencyScaleWithNewSelection)\r\n        onChangePriority(urgencyScaleWithNewSelection.find(x => x.selected === true))\r\n    }\r\n\r\n    const generateUrgencyOptions = () => {\r\n        return urgencyScale.map((x, i) => {\r\n\r\n            if (x.selected) {\r\n                return <div key={i} style={{\r\n                    backgroundColor: x.color,\r\n                    width: 'calc(2.5rem + 5px)',\r\n                    height: 'calc(2.5rem + 5px)',\r\n                    border: '5px solid #5BF326',\r\n                    borderRadius: '3px',\r\n                    cursor: 'pointer'\r\n                }} />\r\n            }\r\n\r\n            return <div key={i} style={{\r\n                backgroundColor: x.color,\r\n                width: '2.5rem',\r\n                height: '2.5rem',\r\n                cursor: 'pointer'\r\n            }} onClick={() => onClickToSetUrgency(x.urgency)} />\r\n        })\r\n    }\r\n\r\n    return <FormItem>\r\n        <IsItUrgentLabel> Is It Urgent? </IsItUrgentLabel>\r\n        <IsItUrgentSelectionArea>\r\n            {generateUrgencyOptions()}\r\n        </IsItUrgentSelectionArea>\r\n    </FormItem>\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport const WhatToDo = ({ initialWhatToDo, onChangeWhatToDo }) => {\r\n\r\n    const FormItem = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 35%;`\r\n\r\n    const WhatToDoLabel = styled.div`\r\n    font-size: 30px;\r\n    `\r\n\r\n    const InputWhatToDo = styled.input`\r\n    background: #FFFFFF;\r\n    box-shadow: 5px 5px 10px #A9C4DA;\r\n    border-radius: 5px;\r\n    border: 0;\r\n    height: 5rem;\r\n    outline: none;`\r\n\r\n    return <FormItem>\r\n        <WhatToDoLabel> What to do? </WhatToDoLabel>\r\n        <InputWhatToDo defaultValue={initialWhatToDo} onChange={(e) => onChangeWhatToDo(e.target.value)} type=\"text\" />\r\n    </FormItem >\r\n}","import Avatar1 from '../assets/avatar1.png'\r\nimport Avatar2 from '../assets/avatar2.png'\r\nimport Avatar3 from '../assets/avatar3.png'\r\nimport Avatar4 from '../assets/avatar4.png'\r\n\r\nexport const whoList = [\r\n    { idx: 1, avatarSource: Avatar1 },\r\n    { idx: 2, avatarSource: Avatar2 },\r\n    { idx: 3, avatarSource: Avatar3 },\r\n    { idx: 4, avatarSource: Avatar4 }\r\n]","export default __webpack_public_path__ + \"static/media/avatar1.00d92f05.png\";","export default __webpack_public_path__ + \"static/media/avatar2.92e24b05.png\";","export default __webpack_public_path__ + \"static/media/avatar3.72ef8f65.png\";","export default __webpack_public_path__ + \"static/media/avatar4.30d46c24.png\";","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { Avatar } from 'antd'\r\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\r\nimport { whoList } from '../../../helpers/whoList';\r\n\r\n\r\n\r\nexport const Who = ({ initialSelectedWho, onChangeSelectedWho }) => {\r\n    const [selectedwho, setSelectedWho] = useState(initialSelectedWho)\r\n\r\n    const FormItem = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 30%;\r\n    padding-left: 1rem;`\r\n\r\n    const WhoLabel = styled.div`\r\n    font-size: 30px;\r\n    `\r\n\r\n    const WhoSelectionArea = styled.div`\r\n    display: flex;\r\n    height: 5rem;\r\n    background: #FFFFFF;\r\n    box-shadow: 5px 5px 10px #A9C4DA;\r\n    border-radius: 5px;`\r\n\r\n    const ScrollLeftOrRightArrow = styled.div`    \r\n    width: 10%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;`\r\n\r\n    const ThreeAvatarsArea = styled.div`\r\n    width: 80%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;`\r\n\r\n    const generateAvatars = () => {\r\n        return whoList\r\n            .map((x, i) => {\r\n                return <Avatar\r\n                    key={i}\r\n                    style={getAvatarStyle(x.idx)}\r\n                    onClick={() => {\r\n                        setSelectedWho(x.idx)\r\n                        onChangeSelectedWho(x.idx)\r\n                    }}\r\n                    icon={< img src={x.avatarSource} alt={`Avatar ${x.idx}`} />}\r\n                />\r\n            })\r\n    }\r\n\r\n    const getAvatarStyle = (avatarIndex) => {\r\n        if (avatarIndex === selectedwho) {\r\n            return {\r\n                border: '5px solid #5BF326',\r\n                boxSizing: 'border-box',\r\n                cursor: 'pointer',\r\n                height: 'calc(3rem + 5px)',\r\n                width: 'calc(3rem + 5px)',\r\n                margin: '0 0.3rem'\r\n            }\r\n        }\r\n\r\n        return {\r\n            cursor: 'pointer',\r\n            height: '3rem',\r\n            width: '3rem',\r\n            margin: '0 0.3rem'\r\n        }\r\n    }\r\n\r\n    const onClickRight = () => {\r\n        if (selectedwho === 4) {\r\n            return setSelectedWho(1)\r\n        }\r\n\r\n        setSelectedWho(selectedwho + 1)\r\n    }\r\n\r\n    const onClickLeft = () => {\r\n        if (selectedwho === 1) {\r\n            return setSelectedWho(4)\r\n        }\r\n\r\n        setSelectedWho(selectedwho - 1)\r\n    }\r\n\r\n    return <FormItem>\r\n        <WhoLabel> Who </WhoLabel>\r\n        <WhoSelectionArea>\r\n            <ScrollLeftOrRightArrow onClick={onClickLeft}>\r\n                <LeftOutlined />\r\n            </ScrollLeftOrRightArrow>\r\n            <ThreeAvatarsArea>\r\n                {generateAvatars()}\r\n            </ThreeAvatarsArea>\r\n            <ScrollLeftOrRightArrow onClick={onClickRight}>\r\n                <RightOutlined />\r\n            </ScrollLeftOrRightArrow>\r\n        </WhoSelectionArea>\r\n    </FormItem>\r\n\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { CheckOutlined } from '@ant-design/icons';\r\nimport { Spin } from 'antd';\r\n\r\nexport const Save = ({ loading, saveTask }) => {\r\n\r\n    const FormItem = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 10%;\r\n    padding-left: 1rem`\r\n\r\n    const SaveLabel = styled.div`\r\n    font-size: 30px;\r\n    `\r\n\r\n    const SaveButton = styled.div`\r\n    height: 5rem;\r\n    background: rgba(61, 188, 147, 0.51);\r\n    box-shadow: 5px 5px 10px #A9C4DA;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 30px`\r\n\r\n\r\n    return <FormItem>\r\n        <SaveLabel> Save? </SaveLabel>\r\n        <Spin spinning={loading}>\r\n            <SaveButton onClick={saveTask}> <CheckOutlined /> </SaveButton>\r\n        </Spin>\r\n    </FormItem>\r\n\r\n}","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport uniqid from 'uniqid'\r\n\r\nimport { IsItUrgent } from './IsItUrgent/IsItUrgent'\r\nimport { WhatToDo } from './WhatToDo/WhatToDo'\r\nimport { Who } from './Who/Who'\r\nimport { Save } from './Save/Save'\r\n\r\nexport const TaskForm = ({ loading, submitNewTask }) => {\r\n\r\n    const formValues = {\r\n        taskId: uniqid(),\r\n        status: 'To Do',\r\n        whatToDo: 'So, what are you up to?',\r\n        selectedWho: 1,\r\n        priority: {\r\n            urgency: 'low',\r\n            color: '#71A1FF',\r\n            selected: true,\r\n        },\r\n        createdAt: ''\r\n    }\r\n\r\n\r\n    const onChangeWhatToDo = (whatToDo) => {\r\n        formValues.whatToDo = whatToDo\r\n    }\r\n\r\n    const onChangeSelectedWho = (selectedWho) => {\r\n        formValues.selectedWho = selectedWho\r\n    }\r\n\r\n    const onChangePriority = (urgency) => {\r\n        formValues.priority = urgency\r\n    }\r\n\r\n    const saveTask = () => {\r\n        formValues.createdAt = (new Date()).getTime()\r\n        console.log(formValues);\r\n        submitNewTask(formValues);\r\n    }\r\n\r\n    const TaskFormLayout = styled.div`\r\n    grid-column: 2 / 5;\r\n    grid-row: 2;\r\n    display: flex;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -khtml-user-select: none;\r\n    -webkit-user-select: none;\r\n    -o-user-select: none;\r\n    `\r\n\r\n    return <TaskFormLayout>\r\n        <WhatToDo initialWhatToDo={formValues.whatToDo} onChangeWhatToDo={onChangeWhatToDo} />\r\n        <Who initialSelectedWho={formValues.selectedWho} onChangeSelectedWho={onChangeSelectedWho} />\r\n        <IsItUrgent initialUrgency={formValues.priority} onChangePriority={onChangePriority} />\r\n        <Save loading={loading} saveTask={saveTask} />\r\n    </TaskFormLayout>\r\n}","import React, { Fragment } from 'react'\r\nimport { Avatar, Button, Card, Tag } from 'antd';\r\nimport styled from 'styled-components'\r\nimport { whoList } from '../../../helpers/whoList';\r\n\r\nexport const TaskCard = ({ taskId, changeTaskStatus, status, whatToDo, who, priority }) => {\r\n\r\n    const getPriorityToSetIntoTitle = () => {\r\n        const ColorBlock = styled.span`\r\n        display: inline-block;\r\n        height: 1rem;\r\n        width: 1rem;\r\n        background-color: ${priority.color};\r\n        margin-left: 1rem;\r\n        `\r\n\r\n        const CardTitle = styled.span`\r\n        display: flex;\r\n        align-items: center;\r\n        `\r\n        return <CardTitle> Priority <ColorBlock /> </CardTitle>\r\n    }\r\n\r\n    const getCardButtons = () => {\r\n        const ToDo = <Tag style={{ cursor: 'pointer' }} color=\"volcano\" onClick={() => changeTaskStatus(taskId, 'To Do')}> To Do </Tag>\r\n        const Doing = <Tag style={{ cursor: 'pointer' }} color=\"magenta\" onClick={() => changeTaskStatus(taskId, 'Doing')}> Doing </Tag>\r\n        const Done = <Tag style={{ cursor: 'pointer' }} color=\"green\" onClick={() => changeTaskStatus(taskId, 'Done')}> Done </Tag>\r\n\r\n        switch (status) {\r\n            case 'To Do':\r\n                return [Doing, Done]\r\n            default:\r\n                return\r\n\r\n            case 'Doing':\r\n                return [ToDo, Done]\r\n\r\n            case 'Done':\r\n                return [ToDo, Doing]\r\n        }\r\n    }\r\n\r\n    const Footer = styled.div` \r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    `\r\n\r\n\r\n    return <Card size=\"small\" title={getPriorityToSetIntoTitle()} extra={getCardButtons()} style={{ marginBottom: '2rem' }}>\r\n        <div>\r\n            {whatToDo}\r\n        </div>\r\n        <Footer>\r\n            <span> Created at {new Date().toLocaleDateString()} </span>\r\n\r\n            <Avatar src={<img src={whoList.find(x => x.idx === who).avatarSource} alt={`Avatar ${who}`} />} />\r\n        </Footer>\r\n    </Card>\r\n\r\n}","import { Spin } from 'antd'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { TaskCard } from './TaskCard/TaskCard'\r\n\r\nexport const TaskList = ({ loading, taskList, setTaskList }) => {\r\n\r\n    const TaskListLayout = styled.div`\r\n    grid-column: 2 / 5;\r\n    grid-row: 3;`\r\n\r\n    const ColumnHeadersArea = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 2rem;`\r\n\r\n    const ColumnHeader = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-grow: 1;\r\n    font-size: 30px;`\r\n\r\n    const Divider = styled.div`\r\n    border: 0.1rem solid #6D6A6A;\r\n    background-color: #606A6A;\r\n    margin-bottom: 2rem;`\r\n\r\n    const changeTaskStatus = (taskId, moveTo) => {\r\n        const taskListCopy = [...taskList]\r\n        const taskToBeMoved = taskListCopy.find(x => x.taskId === taskId)\r\n\r\n        taskToBeMoved.status = moveTo\r\n        setTaskList(taskListCopy)\r\n    }\r\n\r\n    const generateTaskColumns = () => {\r\n\r\n        const Column = styled.div`\r\n        padding: 0 1%;\r\n        width: calc(100% / 3);\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-itens: center;\r\n        flex-direction: column`\r\n\r\n        const Row = styled.div`\r\n        display: flex;`\r\n\r\n        return <Row>\r\n            <Column> {\r\n                taskList\r\n                    .filter(x => x.status === 'To Do')\r\n                    .map((x, i) => (<TaskCard key={`To Do ${i}`} taskId={x.taskId} changeTaskStatus={changeTaskStatus} status={x.status} whatToDo={x.whatToDo} who={x.selectedWho} priority={x.priority} />))\r\n            } </Column>\r\n            <Column> {\r\n                taskList\r\n                    .filter(x => x.status === 'Doing')\r\n                    .map((x, i) => (<TaskCard key={`Doing ${i}`} taskId={x.taskId} changeTaskStatus={changeTaskStatus} status={x.status} whatToDo={x.whatToDo} who={x.selectedWho} priority={x.priority} />))\r\n            }</Column>\r\n            <Column> {\r\n                taskList\r\n                    .filter(x => x.status === 'Done')\r\n                    .map((x, i) => (<TaskCard key={`Done ${i}`} taskId={x.taskId} changeTaskStatus={changeTaskStatus} status={x.status} whatToDo={x.whatToDo} who={x.selectedWho} priority={x.priority} />))\r\n            } </Column>\r\n        </Row>\r\n    }\r\n\r\n    return <TaskListLayout>\r\n        <ColumnHeadersArea>\r\n            <ColumnHeader> To Do </ColumnHeader>\r\n            <ColumnHeader> Doing </ColumnHeader>\r\n            <ColumnHeader> Done </ColumnHeader>\r\n        </ColumnHeadersArea>\r\n        <Divider />\r\n        <Spin spinning={loading}>\r\n            {generateTaskColumns()}\r\n        </Spin>\r\n    </TaskListLayout>\r\n}","import { Spin } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport uniqid from 'uniqid'\r\n\r\nimport { TaskForm } from '../../components/TaskForm/TaskForm'\r\nimport { TaskList } from '../../components/TaskList/TaskList'\r\n\r\nexport const Layout = () => {\r\n\r\n    const [taskList, setTaskList] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const submitNewTask = (newTask) => {\r\n        const taskListCopy = [...taskList]\r\n        taskListCopy.push(newTask)\r\n\r\n        const reorderedTaskListCopy = taskListCopy.sort((x, y) => x.createdAt - y.createdAt)\r\n\r\n        setLoading(true)\r\n\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n            setTaskList(reorderedTaskListCopy)\r\n        }, 3000)\r\n    }\r\n\r\n    const Structure = styled.div`\r\n        overflow-y: auto;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        display: grid;\r\n        grid-template-columns: 8em 1fr 1fr 1fr 8em;\r\n        grid-template-rows: 1rem 9rem 1fr;\r\n        background-image: linear-gradient(to bottom right, #E7F0FD, #ACEEBB);\r\n    `\r\n\r\n    return <Structure>\r\n        <TaskForm loading={loading} submitNewTask={submitNewTask} />\r\n        <TaskList loading={loading} taskList={taskList} setTaskList={setTaskList} />\r\n    </Structure>\r\n\r\n}","import './App.css';\r\nimport { Layout } from './pages/Layout/Layout'\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}